
DECLARE @name VARCHAR(50) -- database name  
DECLARE @path VARCHAR(256) -- path for backup files  
DECLARE @fileName VARCHAR(256) -- filename for backup  
DECLARE @fileDate VARCHAR(20) -- used for file name 

SET @path = 'C:\Backup\'  

SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112) 

DECLARE db_cursor CURSOR FOR  
SELECT name 
FROM MASTER.dbo.sysdatabases 
WHERE name NOT IN ('master','model','msdb','tempdb')  

OPEN db_cursor   
FETCH NEXT FROM db_cursor INTO @name   

WHILE @@FETCH_STATUS = 0   
BEGIN   
       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'  
       BACKUP DATABASE @name TO DISK = @fileName  

       FETCH NEXT FROM db_cursor INTO @name   
END   

CLOSE db_cursor   
DEALLOCATE db_cursor


//*************NETMAGIC************

180.179.144.13-DB1
180.179.144.14-DB2
180.179.67.205
180.179.67.206
180.179.67.207
180.179.67.35
180.179.67.38
180.179.67.39
180.179.144.12

//************WWW.Veston.IN********

//************WWW.Veston.IN********


//******************************Eclipse DB Credentials******************************

Database URL: jdbc:sqlserver://180.179.67.205;databaseName=Dev
User Name: sa
PWD: vestige@123
JNDI URL: java:comp/env/jdbc/SqlServerDB

//******************************Eclipse DB Credentials******************************

//******************************Query To search Vendor and Item Code******************************

select ItemVendor_Link.ItemId,ItemVendor_Link.VendorId,Item_Master.ItemName,Vendor_Master.VendorCode,Item_Master.ItemCode,Vendor_Master.VendorName from ItemVendor_Link INNER JOIN Item_Master on ItemVendor_Link.ItemId=Item_Master.ItemId INNER JOIN Vendor_Master on ItemVendor_Link.VendorId = Vendor_Master.VendorId;

//******************************Query To search Vendor and Item Code******************************

//******************************Query To Search Username and password According to city Id******************************

select distinct lm.AssignedURL,lm.name,um.UserName,um.WebUserPassword,urll.locationid from UserRoleLoc_link urll
inner join user_master um on um.userid=urll.UserId
inner join Location_Master lm on lm.LocationId=urll.locationid
where urll.locationid=17

//******************************Query To Search Username and password According to city Id******************************

//*****************************Query To View a stored Procedure**************************

EXEC sp_helptext 'procedure2'

//*****************************Query To View a stored Procedure**************************
Vestige Marketing Pvt. Ltd.
A-89,Okhla Industrial Area Phase II

//*****************************Vestige Dotnet Panel Access*******************************
User Id: super.admin
Password: Mobile@2012
//*****************************Vestige Dotnet Panel Access*******************************

//***************************************case in SQL*************************************************

select SUM(CASE WHEN Address='USA' THEN 1 ELSE 0 END ) as USA, SUM(CASE WHEN Address='fbd' THEN 1 ELSE 0 END ) as Faridabad, SUM(CASE WHEN Address='IND' THEN 1 ELSE 0 END ) as India, SUM(CASE WHEN Address='dl' THEN 1 ELSE 0 END ) as Delhi from emp

//***************************************case in SQL*************************************************

select * from Promotion_Master;
use Dev;

select * from Location_Master;
select * from User_Master;
update Location_Master set AssignedURL='localhost' where LocationId='17';

EXEC sp_helptext 'sp_TOSave';

date();

select * from DistributorBusiness_Current;

//***************************************Stored Procedure*******************************************

CREATE Procedure [dbo].[sp_TOSave]

    

	@jsonForItems	nvarchar(max),

	@TOINumber  varchar(20),

	@statusId int,

	@LocationId int, 

	@CreatedBy int,

		@PackSize				INT,

		@ExpectedDeliveryDate	VARCHAR(20),

		@ShippingBillNo			VARCHAR(20),

    	@ShippingDetails		VARCHAR(20),

    	@RefNumber				VARCHAR(100),

		@Remarks				VARCHAR(100),

		@Grossweight            Numeric(12,4),

	@outParam		VARCHAR(500) OUTPUT

AS

Begin

	Begin Try

	 	set nocount on ;

	 

	   BEGIN Transaction

		Declare

			@iHnd					INT,					@BucketId				INT,			@SourceLocationId		INT,

			@DestinationLocationId	INT,				

			@TODate					VARCHAR(20),			@CreationDate			VARCHAR(20),	@ShippingDate			VARCHAR(20),

								@ModifiedBy				INT,			@ModifiedDate			VARCHAR(20),

			--@IndentNo				VARCHAR(20),			

			@TNumber				VARCHAR(20),

			@TotalTOQuantity		Numeric(12,4),			@TotalTOAmount			Money,			@CreatedDate			VARCHAR(20) ,

			@Indentised				Int,					@SystemDate				DateTime,	

			@IndexSeqNo				INT,					

			@Isexported				Bit,

					

			@LocationCode			VARCHAR(20),			@RecCnt					VARCHAR(2000),

			@ExporterRef			varchar(200),			@OtherRef				varchar(200),	@BuyerOtherthanConsignee varchar(200),

			@PreCarriage			Varchar(200),			@PlaceofReceiptbyPreCarrier varchar(200),@VesselflightNo			varchar(200),

			@PortofLoading			varchar(200),			@PortofDischarge		varchar(200),	@PortofDestination		varchar(200),

			@TermsofDelivery		Varchar(200),			@DELIVERY				varchar(200),	@PAYMENT				varchar(200),

			@BuyerOrderNo			Varchar(200),			@BuyerOrderDate			varchar(20)



			Set @SystemDate = getdate()

			

			Declare @SeqNo VARCHAR(200)

			Set @iHnd = 0





           DECLARE @MyHierarchy JSONHierarchy ,@XMLItems xml

           INSERT INTO @myHierarchy

				SELECT * FROM parseJSON(@jsonForItems)

				--SELECT dbo.ToXML(@MyHierarchy)

				SELECT @XMLItems=dbo.ToXML(@MyHierarchy)





                          



                            select  b.value('@ItemId', 'int') as ItemId,  

							  b.value('@Items', 'varchar(20)') as ItemCode,

							  b.value('@ItemName', 'varchar(100)') as ItemDescription,

							  b.value('@BatchNo', 'varchar(20)') as BatchNo,

							  b.value('@UnitPrice', 'Numeric(12,4)') as TransferPrice,

							  b.value('@TotalAmount', 'Money') as TotalAmount,

							  b.value('@BucketId', 'int') as BucketId,

							  b.value('@TOINo','varchar(50)') as TOINumber,

							  b.value('@RequestQty','float') as RequestQty,

							  b.value('@Weight','float') as Weight,

							  b.value('@MfgBatchNo','varchar(50)') as ManufactureBatchNo,

							  b.value('@Adjust','float') as AfterAdjustQty,

							  b.value('@MRP','Numeric(12,4)') as MRP,

							  b.value('@MfgDate','varchar(50)') as MfgDate,

							  b.value('@ExpDate','varchar(50)') as ExpDate,

							   b.value('@EachCartonQty','float') as EachCartonQty,

							  b.value('@TOINo','varchar(50)') as ContainerNOFromTo,

							  	b.value('@Weight','float') as GrossWeightItem,

							  	  	b.value('@UOMId','int') as UOMId

								into #TO_Detail 

							  FROM @XMLItems.nodes('/root/item') a(b)

							  

							  alter table  #TO_Detail   add  RowNo Int Identity(1,1)  ;	

	        Declare @countOfItemhavingZeroTP Int

	        

	        select @countOfItemhavingZeroTP =count(TOINumber) from #TO_Detail where TransferPrice=0

	        if @countOfItemhavingZeroTP>0

	        BEGIN

	        SET @outParam = 'Transfer price can not be Zero for an item' 

				SELECT @outParam OutParam 

				ROLLBACK

				RETURN 

	        END 

	        

	        

	         

	        if Exists (select Tonumber from TO_Header where TOINumber=@TOINumber)

	        BEGIN

	        SET @outParam = 'This TOI is already processed.' 

				SELECT @outParam OutParam 

				ROLLBACK

				RETURN 

	        END 

	        



		

			DECLARE @ItemCodeDuplicate as VARCHAR(800), @ItemCodeDuplicateModified as VARCHAR(800)

			SET @ItemCodeDuplicate =''

			SET @ItemCodeDuplicateModified = ''

			SELECT @ItemCodeDuplicate = @ItemCodeDuplicate + ',' + im.ItemCode From Inventory_LocBucketBatch ilb

			INNER JOIN Item_Master im 

			ON im.ItemId = ilb.ItemId

			WHERE ilb.ItemId IN (SELECT ItemId FROM #TO_Detail) AND Ilb.LocationId=@LocationId

			Group By im.ItemCode, ilb.ItemId, BatchNo, LocationId, BucketId 

			Having Count(1)>1

			

			--SELECT @ItemCodeDuplicate 

			-- Remove Comma from @ItemCodeDuplicate, 

			-- If length >0 

			-- SET @outParam = 'INF0226' + @ItemCodeDuplicate

			SELECT @ItemCodeDuplicateModified = REPLACE(@ItemCodeDuplicate, ',', '') 

			

			--SELECT @ItemCodeDuplicateModified 



			--If LEN(@ItemCodeDuplicateModified) > 0

			--BEGIN

			--	SET @outParam = 'INF0229' 

			--	SELECT @outParam OutParam 

			--	ROLLBACK

			--	RETURN 

			--END





		SELECT  @TOINumber	= head.TOINumber,@SourceLocationId=SourceLocationId,@DestinationLocationId = DestinationLocationId, 

				@CreationDate= GETDATE(), 

				@TotalTOQuantity	= head.TotalTOIQuantity,@TotalTOAmount= head.TotalTOIAmount,@Indentised= Indentised, 

				@CreatedDate	= GETDATE(),			@ModifiedBy			= @CreatedBy

				,			@ModifiedDate			= GETDATE(),

			   @Isexported = Isexported				

				

		FROM

			   TOI_Header	head

					Inner Join TOI_Detail det

					On head.TOINumber = det.TOINumber

					Where	

					 head.TOINumber=@TOINumber

			

		SELECT @LocationCode = LocationCode FROM Location_Master WHERE LocationId = @DestinationLocationId

		--Select @GrossWeight 

		DECLARE @fromstate int;

		DECLARE @tostate int;

		select @fromstate = StateId from location_master where locationid=@SourceLocationId

		select @tostate =StateId from location_master where locationid=@DestinationLocationId



--		SELECT @TNumber,'ddd'

		Declare @cnt int

		set @cnt = (Select count(TONumber) from TO_Header where TOINumber = @TOINumber)

		--IF (@cnt='0')

		--BEGIN

		IF IsNull(@TNumber,'-1')='-1'

		BEGIN

		IF (@cnt='0' AND @StatusId >='1')

		BEGIN

			   if (@fromstate<>@tostate) 

			      begin

				EXECUTE usp_GetSeqNo 'TO', @SourceLocationId, @SeqNo Out

		         end

		         else 

		         begin

		         EXECUTE usp_GetSeqNo 'TOD', @SourceLocationId, @SeqNo Out

		         end

			SET @TNumber=@SeqNo



			INSERT INTO TO_Header (TONumber, TOINumber,	SourceLocationID, DestinationLocationID, ShippingWayBillNo, ShippingDetails, 

				 GrossWeight, PackSize, Status, RefNumber, Remarks, CreationDate, TotalTOQuantity, TotalTOAmount, Indentised, ShippingDate, 

				  ExpectedDeliveryDate,  CreatedBy, CreatedDate, ModifiedBy, ModifiedDate,Isexported)

				VALUES (@TNumber, @TOINumber, @SourceLocationId, @DestinationLocationId, @ShippingDetails, @ShippingDetails,

				  @GrossWeight, @PackSize, @StatusId, @RefNumber, @Remarks, @SystemDate, @TotalTOQuantity, @TotalTOAmount,

				   @Indentised, @SystemDate, NULLIF(@ExpectedDeliveryDate, '1900-01-01 00:00:00'), @ModifiedBy, @SystemDate,

				   

				    @ModifiedBy, @SystemDate,@Isexported

						)

		END	



		ELSE IF(@cnt<>'0' AND @StatusId<>'1')

		BEGIN

		SET @outParam = 'INF0226' 

		  ROLLBACK

		 SELECT 'INF0226' OutParam

		   Return

		END

		 IF (@StatusId = 2)

            

			Exec [usp_Interface_Audit] '', 'TRNOUT', @LocationCode, 'TO_Header', @TNumber, NULL, NULL, NULL, NULL, 'I', @ModifiedBy, @RecCnt OUTPUT

--			SELECT @TNumber, 'dd'



		END



		ELSE

		BEGIN

			

			-- Check Concurrency, Get DBDate

			Declare @DBDate DateTime

			Select @DBDate = (Select ModifiedDate = (Case When ModifiedBy Is Not Null Then ModifiedDate Else CreatedDate End) From TO_Header Where  TONumber = @TNumber)

			

			If @ModifiedDate <> Convert(VARCHAR(20),@DBDate,120)

			BEGIN

				SET @outParam = 'INF0022' 

				SELECT @outParam OutParam

				ROLLBACK

				Return

			END



			DECLARE @OldStatus AS INT

			SELECT @OldStatus = Status FROM TO_Header WHERE TONumber = @TNumber

			-- Update In TO_Header

			UPDATE TO_Header

			SET ShippingWayBillNo	=	@ShippingBillNo,		ShippingDetails		=	@ShippingDetails,

				GrossWeight			=	@GrossWeight,			PackSize			=	@PackSize,

				TotalTOQuantity		=	@TotalTOQuantity,		TotalTOAmount		=	@TotalTOAmount,

				ModifiedBy			=	@ModifiedBy,			ModifiedDate		=	@SystemDate	,

				Status				=	@StatusId, 

				ShippingDate		=   CASE WHEN @StatusId = 2 THEN @SystemDate ELSE NULL END,

				RefNumber			=	@RefNumber,				Remarks				=	@Remarks,

				ExpectedDeliveryDate=	NULLIF(@ExpectedDeliveryDate, '1900-01-01 00:00:00'),

				ExporterRef			= @ExporterRef,			OtherRef					= @OtherRef,					BuyerOtherthanConsignee = @BuyerOtherthanConsignee,

				PreCarriage			= @PreCarriage,			PlaceofReceiptbyPreCarrier	= @PlaceofReceiptbyPreCarrier,	VesselflightNo			= @VesselflightNo,

				PortofLoading		= @PortofLoading,		PortofDischarge				= @PortofDischarge,				PortofDestination		= @PortofDestination,

				TermsofDelivery		= @TermsofDelivery,		DELIVERY					= @DELIVERY ,					PAYMENT					= @PAYMENT,

				BuyerOrderNo		= @BuyerOrderNo,		BuyerOrderDate				= @BuyerOrderDate

			WHERE TONumber = @TNumber

			--Update TOI Status To Closed

			

		END

--END

--ELSE

--BEGIN

--SET @outParam = 'INF0226' 

--END

		-- If Confirm, Update the Quantity in InventoryLocation_Master and Inventory_LocBucketBatch Tabled

		IF @StatusId = 2

		BEGIN

             

			

			--DECLARE @tempItemID INT,@tempBatchNo Varchar(20),@tempBucketId INT ,@tempQuantity Numeric(18,4),@DiscountValue Numeric(18,4),

			--							@tempDiscount Numeric(18,4)

										

			--								DECLARE INVLOCBUCKBATCH CURSOR FOR SELECT BD.BatchNo,BD.BucketId,BD.ItemId,BD.AfterAdjustQty  FROM #TO_Detail BD

											          

			--								             OPEN INVLOCBUCKBATCH

			--								 FETCH NEXT FROM INVLOCBUCKBATCH INTO @tempBatchNo,@tempBucketId,@tempItemID,@tempQuantity

                               

   --                         WHILE @@FETCH_STATUS = 0

   --                           BEGIN

   --                           set @tempQuantity=-@tempQuantity ;

   --                        SELECT @tempDiscount =0.00 ;

   --                         SET  @DiscountValue=0.00 ;

   --                         EXEC sp_updateInventoryInStockLedger 3,@TNumber,@SourceLocationId,@tempItemID,@tempBatchNo,@tempQuantity,@tempBucketId,

   --                         @DiscountValue ,0,@outParam OUT

                            

   --                         if @outParam!=''

   --                                BEGIN

   --                                SELECT @outParam OutParam

   --                                  CLOSE INVLOCBUCKBATCH

                     

   --                                  DEAllOCATE INVLOCBUCKBATCH

   --                                ROLLBACK

   --                                RETURN

   --                                END

   --                         FETCH NEXT FROM INVLOCBUCKBATCH INTO @tempBatchNo,@tempBucketId,@tempItemID,@tempQuantity

   --                           END

                              

   --                           CLOSE INVLOCBUCKBATCH

                              

   --                           DEAllOCATE INVLOCBUCKBATCH

							



			Update TOI_Header Set Status =  5 WHERE TOINumber = @TOINumber

			--Exec [usp_Interface_Audit] '', 'TRNORDINS', @LocationCode, 'TOI_Header', @TOINumber, NULL, NULL, NULL, NULL, 'U', @ModifiedBy,  @RecCnt	OUTPUT	



			--Exec [usp_Interface_Audit] '', 'TRNOUT', @LocationCode, 'TO_Header', @TNumber, NULL, NULL, NULL, NULL, 'I', @ModifiedBy	, @RecCnt	OUTPUT



		END

--Select @StatusId

		IF @StatusId = 2 OR @StatusId = 1

		BEGIN



			--SELECT 'T', ItemId, AfterAdjustQty As Quantity, BatchNo, MfgDate, ExpDate, ManufactureBatchNo, MRP, BucketId FROM @TO_Detail

			--Select 'TT2', * From dbo.Inventory_LocBucketBatch Where ItemId in (2,4) And LocationId = 2



			DELETE FROM TO_Detail WHERE TONumber = @TNumber

			DELETE FROM TOBatchDetail WHERE TONumber = @TNumber



			--INSERT INTO TO_Detail (TONumber, RowNo, ItemId, ItemCode, ItemDescription, Quantity, UOM, TransferPrice, TotalAmount, IndentNo, CreatedBy, CreatedDate)

		

			INSERT INTO TO_Detail (	TONumber, RowNo, ItemId, ItemCode, ItemDescription, Quantity, UOM, TransferPrice, TotalAmount, --IndentNo, 

									CreatedBy, CreatedDate, BucketId,EachCartonQty, ContainerNOFromTo ,GrossWeightItem)--,IGSTAMT,CGSTAMT,SGSTAMT)

			SELECT @TNumber,ROW_NUMBER() OVER (Order By ItemId) as RowNo,ItemId, ItemCode, ItemDescription, SUM(AfterAdjustQty) AS AfterAdjustQty, UOMId, TransferPrice, SUM(TotalAmount) As TotalAmount, --IndentNo, 

										@CreatedBy,GETDATE(),	BucketId,EachCartonQty, ContainerNOFromTo ,GrossWeightItem --,IGSTAMT,CGSTAMT,SGSTAMT

			FROM #TO_Detail

			GROUP BY ItemId, ItemCode, ItemDescription, UOMId, TransferPrice, BucketId,EachCartonQty, ContainerNOFromTo ,GrossWeightItem --,--IGSTAMT,CGSTAMT,SGSTAMT







--------------------------------***************** To Check Any Mismatching of Item & its Batch********--------------------



			Begin 

			declare @ItemId int,@BatchNo Varchar(30)

	DECLARE BatchCursor CURSOR FOR SELECT ItemId,BatchNo From #TO_Detail

	OPEN BatchCursor

				FETCH NEXT FROM BatchCursor INTO @ItemId,@BatchNo

				WHILE @@FETCH_STATUS = 0

				Begin

				If not exists(select itemid from Inventory_LocBucketBatch where locationid=@SourceLocationId and itemid=@ItemId and BatchNo=@BatchNo)

				begin

				SET @outParam = 'Item Id & Batch No. mismatching' 

				SELECT @outParam OutParam

				

				CLOSE BatchCursor 

			    DEALLOCATE BatchCursor 

				ROLLBACK

				RETURN 

				end

				FETCH NEXT FROM BatchCursor INTO @ItemId,@BatchNo

				END

						

			CLOSE BatchCursor 

			DEALLOCATE BatchCursor

	        End



--------------------------------***************** To Check Any Mismatching of Item & its Batch********--------------------

if not exists (select 1 from location_master where locationid=@DestinationLocationId and isminidlcp=1)

			Begin

			





			    DECLARE @Count int;	

				DECLARE @temId int;

				set @temId=0

				

				select 	@Count=max(rowno) from  to_detail where tonumber=@TNumber

				WHILE @Count >0

				BEGIN 

					SELECT @temId= ItemId

					--@TaxTypeCode = TaxCategoryId

					FROM to_detail with (nolock)

					WHERE tonumber = @TNumber

					AND RowNo = @Count



					--Select @iItemId,'',@fromStateID,@toStateID,@TaxTypeCode,'',@IsFormC, @vCustomerOrder

					-- Calculate All Taxes for a customer Order

					

					BEGIN

					      

							exec [usp_BOtotaxcalculate] @temId,@TNumber,@Count,@fromstate,@tostate,@outParam output

							if(@outParam!='')    

							 BEGIN    

								SELECT @outParam OutParam    

								ROLLBACK      

								Return       

							END   

				 

					SET @Count = @Count-1

				END		

				

				end	



			End



		----------------------******************* To insert data in TodetailForMinidlcp ****************---------------------------------

		if exists (select 1 from location_master where locationid=@DestinationLocationId and isminidlcp=1)

			Begin

			INSERT INTO TO_Detail_MiniDLCP (TONumber, RowNo, ItemId, ItemCode,Quantity,TransferPrice, TotalAmount,BucketId)

			SELECT @TNumber,ROW_NUMBER() OVER (Order By todmi.ItemId) as RowNo,todmi.ItemId, todmi.ItemCode, SUM(AfterAdjustQty),IM.TransferPrice, (IM.TransferPrice*SUM(AfterAdjustQty)),5

			FROM #TO_Detail todmi

			inner join Item_master Im on im.itemid=todmi.itemid and im.itemcode=todmi.itemcode

			GROUP BY todmi.ItemId, todmi.ItemCode, im.TransferPrice





			    DECLARE @iCount int;	

				DECLARE @iItemId int;

				set @iItemId=0

				

				select 	@iCount=max(rowno) from  to_detail where tonumber=@TNumber

				WHILE @iCount >0

				BEGIN 

					SELECT @iItemId= ItemId

					--@TaxTypeCode = TaxCategoryId

					FROM to_detail with (nolock)

					WHERE tonumber = @TNumber

					AND RowNo = @iCount



					--Select @iItemId,'',@fromStateID,@toStateID,@TaxTypeCode,'',@IsFormC, @vCustomerOrder

					-- Calculate All Taxes for a customer Order

					

					BEGIN

					      

							exec [usp_totaxcalculate] @iItemId,@TNumber,@iCount,@fromstate,@tostate,@outParam output

							if(@outParam!='')    

							 BEGIN    

								SELECT @outParam OutParam    

								ROLLBACK      

								Return       

							END   

				 

					SET @iCount = @iCount-1

				END		

				

				end	



			End

		----------------------******************* To insert data in TodetailForMinidlcp ****************---------------------





			INSERT INTO TOBatchDetail (TONumber, RowNo, ItemId, Quantity, BatchNo,  MfgDate, ExpDate, ManufactureBatchNo, MRP, FromSubBucketId, CreatedBy, CreatedDate)

			SELECT @TNumber,  RowNo, ItemId, AfterAdjustQty, BatchNo, MfgDate, ExpDate, ManufactureBatchNo, MRP, BucketId, @ModifiedBy, @SystemDate

			FROM #TO_Detail

			GROUP BY ItemId, RowNo, AfterAdjustQty, BatchNo, MfgDate, ExpDate, ManufactureBatchNo, MRP, BucketId

		END

       EXEC UpdateInventroyOn_TO @TNumber ,@outParam OUt

       

       update TO_Header set GrossWeight =tod.we

		from TO_Header toh 

		inner join  

		(select toh.TONumber ,SUM(im.Weight*tod.Quantity) we

		from TO_Header toh inner Join To_Detail tod

		on tod.TONumber=toh.TONumber inner Join 

		Item_Master Im on im.ItemId=tod.ItemId

		 where toh.TONumber=@TNumber

		group by toh.TONumber 

		) tod on tod.Tonumber=toh.tonumber

       

      IF(@outParam!='')

         

       BEGIN

            Select @outParam OutParam

            RollBack

            Return 

       END

       

        if Exists (select TOINumber from TO_Header where TOINumber=@TOINumber group by TOINumber having COUNT(*)>1 )

	        BEGIN

	        SET @outParam = 'This TOI is already processed.' 

				SELECT @outParam OutParam 

				ROLLBACK

				RETURN 

	        END 

	          if Exists (select 1  from toi_header toi (nolock)

	         inner join Location_Master lm (nolock) on lm.LocationId=toi.DestinationLocationID   

	         where TOINumber=@TOINumber  and toi.DestinationLocationID=@DestinationLocationId and lm.Status=1 and isminidlcp=1 and Onaccountoi=2 )

	        BEGIN

	         EXEC [Usp_MiniDlcpTransaction] @DestinationLocationId,null,@TotalTOAmount,@TNumber,@CREATEDBY,null,null,'';

	         --EXEC [Usp_MiniDlcpTransaction] @MiniDLCPID,@amount,null,@transno,@CRkmEATEDBY,@ReverseTransactionStatus,null, '';	

	        END 

	        

	         if Exists (select 1  from toi_header toi (nolock)

	         inner join Location_Master lm (nolock) on lm.LocationId=toi.DestinationLocationID   

	         where TOINumber=@TOINumber  and toi.DestinationLocationID=@DestinationLocationId and lm.Status=1 and isminidlcp=1 and Onaccountoi!=2 )

	        BEGIN

	        insert into PUCTransactionDetail values(1,@TNumber,@TotalTOAmount,GETDATE(),@DestinationLocationId,1) 

	         update  PUCAccount set AvailableAmount=t.AvailableAmount-@TotalTOAmount

	         from PUCAccount a

	         inner join (select AvailableAmount,MiniDLCPID  from PUCAccount)t on

	         a.MiniDLCPID=t.MiniDLCPID where a.MiniDLCPID=@DestinationLocationId

	        END 





	SELECT TONumber TNumber,

			Convert(VARCHAR(20), ModifiedDate , 120) ModifiedDate, 

			1 as IndexSeqNo

	FROM TO_Header 

	WHERE TONumber = @TNumber

	  COMMIT Transaction

	END TRY

	BEGIN CATCH

		CLOSE BatchCursor 

		DEALLOCATE BatchCursor

		SET @outParam = '30001:' + CAST(Error_Number() AS VARCHAR(50)) + ', ' + Error_Message() + 'Error Line: ' + CAST(Error_Line() AS VARCHAR(50)) + ', Source: ' + ERROR_PROCEDURE()

		select @outParam OutParam

		ROLLBACK 

		RETURN

	END CATCH

END
